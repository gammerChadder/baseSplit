'use client';
import { jsx } from "react/jsx-runtime";
import { setOnchainKitConfig } from "./core/OnchainKitConfig.js";
import { useMemo } from "react";
import { DefaultOnchainKitProviders } from "./DefaultOnchainKitProviders.js";
import OnchainKitProviderBoundary from "./OnchainKitProviderBoundary.js";
import { DEFAULT_PRIVACY_URL, DEFAULT_TERMS_URL } from "./core/constants.js";
import { COINBASE_VERIFIED_ACCOUNT_SCHEMA_ID } from "./identity/constants.js";
import { checkHashLength } from "./internal/utils/checkHashLength.js";
import { generateUUIDWithInsecureFallback } from "./utils/crypto.js";
import { OnchainKitContext } from "./useOnchainKit.js";
function OnchainKitProvider({
  address,
  analytics,
  apiKey,
  chain,
  children,
  config,
  projectId,
  rpcUrl,
  schemaId
}) {
  if (schemaId && !checkHashLength(schemaId, 64)) {
    throw Error('EAS schemaId must be 64 characters prefixed with "0x"');
  }
  const sessionId = useMemo(() => generateUUIDWithInsecureFallback(), []);
  const value = useMemo(() => {
    var _a, _b, _c, _d, _e, _f, _g, _h, _i, _j, _k, _l, _m, _n, _o;
    const defaultPaymasterUrl = apiKey ? `https://api.developer.coinbase.com/rpc/v1/${chain.name.replace(" ", "-").toLowerCase()}/${apiKey}` : null;
    const onchainKitConfig = {
      address: address ?? null,
      apiKey: apiKey ?? null,
      chain,
      config: {
        analytics: analytics ?? true,
        analyticsUrl: (config == null ? void 0 : config.analyticsUrl) ?? null,
        appearance: {
          name: ((_a = config == null ? void 0 : config.appearance) == null ? void 0 : _a.name) ?? "Dapp",
          logo: ((_b = config == null ? void 0 : config.appearance) == null ? void 0 : _b.logo) ?? "",
          mode: ((_c = config == null ? void 0 : config.appearance) == null ? void 0 : _c.mode) ?? "auto",
          theme: ((_d = config == null ? void 0 : config.appearance) == null ? void 0 : _d.theme) ?? "default"
        },
        paymaster: (config == null ? void 0 : config.paymaster) || defaultPaymasterUrl,
        wallet: {
          display: ((_e = config == null ? void 0 : config.wallet) == null ? void 0 : _e.display) ?? "classic",
          preference: ((_f = config == null ? void 0 : config.wallet) == null ? void 0 : _f.preference) ?? "all",
          signUpEnabled: ((_g = config == null ? void 0 : config.wallet) == null ? void 0 : _g.signUpEnabled) ?? true,
          termsUrl: ((_h = config == null ? void 0 : config.wallet) == null ? void 0 : _h.termsUrl) || DEFAULT_TERMS_URL,
          privacyUrl: ((_i = config == null ? void 0 : config.wallet) == null ? void 0 : _i.privacyUrl) || DEFAULT_PRIVACY_URL,
          supportedWallets: {
            rabby: ((_k = (_j = config == null ? void 0 : config.wallet) == null ? void 0 : _j.supportedWallets) == null ? void 0 : _k.rabby) ?? false,
            trust: ((_m = (_l = config == null ? void 0 : config.wallet) == null ? void 0 : _l.supportedWallets) == null ? void 0 : _m.trust) ?? false,
            frame: ((_o = (_n = config == null ? void 0 : config.wallet) == null ? void 0 : _n.supportedWallets) == null ? void 0 : _o.frame) ?? false
          }
        }
      },
      projectId: projectId ?? null,
      rpcUrl: rpcUrl ?? null,
      schemaId: schemaId ?? COINBASE_VERIFIED_ACCOUNT_SCHEMA_ID,
      sessionId
    };
    setOnchainKitConfig(onchainKitConfig);
    return onchainKitConfig;
  }, [
    address,
    analytics,
    apiKey,
    chain,
    config,
    projectId,
    rpcUrl,
    schemaId,
    sessionId
  ]);
  return /* @__PURE__ */ jsx(OnchainKitContext.Provider, { value, children: /* @__PURE__ */ jsx(DefaultOnchainKitProviders, { children: /* @__PURE__ */ jsx(OnchainKitProviderBoundary, { children }) }) });
}
export {
  OnchainKitProvider
};
//# sourceMappingURL=OnchainKitProvider.js.map
