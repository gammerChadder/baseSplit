'use client';
import { jsx } from "react/jsx-runtime";
import { DefaultOnchainKitProviders } from "../DefaultOnchainKitProviders.js";
import { OnchainKitProvider } from "../OnchainKitProvider.js";
import sdk from "@farcaster/frame-sdk";
import { farcasterFrame } from "@farcaster/frame-wagmi-connector";
import { createContext, useState, useEffect, useCallback, useMemo } from "react";
import { coinbaseWallet } from "wagmi/connectors";
const emptyContext = {};
const MiniKitContext = createContext(emptyContext);
function MiniKitProvider({
  children,
  notificationProxyUrl = "/api/notify",
  ...onchainKitProps
}) {
  var _a, _b, _c, _d;
  const [context, setContext] = useState(null);
  useEffect(() => {
    sdk.on("frameAdded", ({ notificationDetails }) => {
      if (notificationDetails) {
        updateClientContext({
          details: notificationDetails,
          frameAdded: true
        });
      }
    });
    sdk.on("frameAddRejected", ({ reason }) => {
      console.error("Frame add rejected", reason);
    });
    sdk.on("frameRemoved", () => {
      updateClientContext({
        details: void 0,
        frameAdded: false
      });
    });
    sdk.on("notificationsEnabled", ({ notificationDetails }) => {
      updateClientContext({
        details: notificationDetails
      });
    });
    sdk.on("notificationsDisabled", () => {
      updateClientContext({
        details: void 0
      });
    });
    async function fetchContext() {
      try {
        const context2 = await sdk.context;
        setContext(context2);
      } catch (error) {
        console.error("Error fetching context:", error);
      }
    }
    fetchContext();
    return () => {
      sdk.removeAllListeners();
    };
  }, []);
  const updateClientContext = useCallback(
    ({ details, frameAdded }) => {
      setContext((prevContext) => {
        if (!prevContext) {
          return null;
        }
        return {
          ...prevContext,
          client: {
            ...prevContext.client,
            notificationDetails: details ?? void 0,
            added: frameAdded ?? prevContext.client.added
          }
        };
      });
    },
    []
  );
  const connectors = useMemo(() => {
    return [
      context ? farcasterFrame() : coinbaseWallet({
        appName: process.env.NEXT_PUBLIC_ONCHAINKIT_PROJECT_NAME,
        appLogoUrl: process.env.NEXT_PUBLIC_ICON_URL,
        preference: "all"
      })
    ];
  }, [context]);
  const value = useMemo(() => {
    return {
      context,
      updateClientContext,
      notificationProxyUrl
    };
  }, [updateClientContext, notificationProxyUrl, context]);
  return /* @__PURE__ */ jsx(MiniKitContext.Provider, { value, children: /* @__PURE__ */ jsx(DefaultOnchainKitProviders, { connectors, children: /* @__PURE__ */ jsx(OnchainKitProvider, { ...onchainKitProps, children: /* @__PURE__ */ jsx(
    "div",
    {
      style: {
        paddingTop: ((_a = context == null ? void 0 : context.client.safeAreaInsets) == null ? void 0 : _a.top) ?? 0,
        paddingBottom: ((_b = context == null ? void 0 : context.client.safeAreaInsets) == null ? void 0 : _b.bottom) ?? 0,
        paddingLeft: ((_c = context == null ? void 0 : context.client.safeAreaInsets) == null ? void 0 : _c.left) ?? 0,
        paddingRight: ((_d = context == null ? void 0 : context.client.safeAreaInsets) == null ? void 0 : _d.right) ?? 0
      },
      children
    }
  ) }) }) });
}
export {
  MiniKitContext,
  MiniKitProvider,
  emptyContext
};
//# sourceMappingURL=MiniKitProvider.js.map
