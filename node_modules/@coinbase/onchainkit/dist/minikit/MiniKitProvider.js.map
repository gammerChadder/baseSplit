{"version":3,"file":"MiniKitProvider.js","sources":["../../src/minikit/MiniKitProvider.tsx"],"sourcesContent":["'use client';\n\nimport { DefaultOnchainKitProviders } from '@/DefaultOnchainKitProviders';\nimport { OnchainKitProvider } from '@/OnchainKitProvider';\nimport type { OnchainKitProviderReact } from '@/types';\nimport sdk, { type Context } from '@farcaster/frame-sdk';\nimport { farcasterFrame } from '@farcaster/frame-wagmi-connector';\nimport {\n  createContext,\n  useCallback,\n  useEffect,\n  useMemo,\n  useState,\n} from 'react';\nimport { coinbaseWallet } from 'wagmi/connectors';\nimport type {\n  MiniKitContextType,\n  MiniKitProviderReact,\n  UpdateClientContextParams,\n} from './types';\n\nexport const emptyContext = {} as MiniKitContextType;\n\nexport const MiniKitContext = createContext<MiniKitContextType>(emptyContext);\n\n/**\n * Provides the MiniKit React Context to the app.\n */\nexport function MiniKitProvider({\n  children,\n  notificationProxyUrl = '/api/notify',\n  ...onchainKitProps\n}: MiniKitProviderReact & OnchainKitProviderReact) {\n  const [context, setContext] = useState<Context.FrameContext | null>(null);\n\n  useEffect(() => {\n    sdk.on('frameAdded', ({ notificationDetails }) => {\n      if (notificationDetails) {\n        updateClientContext({\n          details: notificationDetails,\n          frameAdded: true,\n        });\n      }\n    });\n\n    sdk.on('frameAddRejected', ({ reason }) => {\n      console.error('Frame add rejected', reason);\n    });\n\n    sdk.on('frameRemoved', () => {\n      updateClientContext({\n        details: undefined,\n        frameAdded: false,\n      });\n    });\n\n    sdk.on('notificationsEnabled', ({ notificationDetails }) => {\n      updateClientContext({\n        details: notificationDetails,\n      });\n    });\n\n    sdk.on('notificationsDisabled', () => {\n      updateClientContext({\n        details: undefined,\n      });\n    });\n\n    async function fetchContext() {\n      try {\n        // if not running in a frame, context resolves as undefined\n        const context = await sdk.context;\n        setContext(context);\n      } catch (error) {\n        console.error('Error fetching context:', error);\n      }\n    }\n\n    fetchContext();\n\n    return () => {\n      sdk.removeAllListeners();\n    };\n    // eslint-disable-next-line react-hooks/exhaustive-deps\n  }, []);\n\n  const updateClientContext = useCallback(\n    ({ details, frameAdded }: UpdateClientContextParams) => {\n      setContext((prevContext) => {\n        if (!prevContext) {\n          return null;\n        }\n        return {\n          ...prevContext,\n          client: {\n            ...prevContext.client,\n            notificationDetails: details ?? undefined,\n            added: frameAdded ?? prevContext.client.added,\n          },\n        };\n      });\n    },\n    [],\n  );\n\n  const connectors = useMemo(() => {\n    return [\n      context // if context is set, the app is running in a frame, use farcasterFrame connector\n        ? farcasterFrame()\n        : coinbaseWallet({\n            appName: process.env.NEXT_PUBLIC_ONCHAINKIT_PROJECT_NAME,\n            appLogoUrl: process.env.NEXT_PUBLIC_ICON_URL,\n            preference: 'all',\n          }),\n    ];\n  }, [context]);\n\n  const value = useMemo(() => {\n    return {\n      context,\n      updateClientContext,\n      notificationProxyUrl,\n    };\n  }, [updateClientContext, notificationProxyUrl, context]);\n\n  return (\n    <MiniKitContext.Provider value={value}>\n      <DefaultOnchainKitProviders connectors={connectors}>\n        <OnchainKitProvider {...onchainKitProps}>\n          <div\n            style={{\n              paddingTop: context?.client.safeAreaInsets?.top ?? 0,\n              paddingBottom: context?.client.safeAreaInsets?.bottom ?? 0,\n              paddingLeft: context?.client.safeAreaInsets?.left ?? 0,\n              paddingRight: context?.client.safeAreaInsets?.right ?? 0,\n            }}\n          >\n            {children}\n          </div>\n        </OnchainKitProvider>\n      </DefaultOnchainKitProviders>\n    </MiniKitContext.Provider>\n  );\n}\n"],"names":["context"],"mappings":";;;;;;;AAqBO,MAAM,eAAe,CAAA;AAEf,MAAA,iBAAiB,cAAkC,YAAY;AAKrE,SAAS,gBAAgB;AAAA,EAC9B;AAAA,EACA,uBAAuB;AAAA,EACvB,GAAG;AACL,GAAmD;;AACjD,QAAM,CAAC,SAAS,UAAU,IAAI,SAAsC,IAAI;AAExE,YAAU,MAAM;AACd,QAAI,GAAG,cAAc,CAAC,EAAE,0BAA0B;AAChD,UAAI,qBAAqB;AACH,4BAAA;AAAA,UAClB,SAAS;AAAA,UACT,YAAY;AAAA,QAAA,CACb;AAAA,MAAA;AAAA,IACH,CACD;AAED,QAAI,GAAG,oBAAoB,CAAC,EAAE,aAAa;AACjC,cAAA,MAAM,sBAAsB,MAAM;AAAA,IAAA,CAC3C;AAEG,QAAA,GAAG,gBAAgB,MAAM;AACP,0BAAA;AAAA,QAClB,SAAS;AAAA,QACT,YAAY;AAAA,MAAA,CACb;AAAA,IAAA,CACF;AAED,QAAI,GAAG,wBAAwB,CAAC,EAAE,0BAA0B;AACtC,0BAAA;AAAA,QAClB,SAAS;AAAA,MAAA,CACV;AAAA,IAAA,CACF;AAEG,QAAA,GAAG,yBAAyB,MAAM;AAChB,0BAAA;AAAA,QAClB,SAAS;AAAA,MAAA,CACV;AAAA,IAAA,CACF;AAED,mBAAe,eAAe;AACxB,UAAA;AAEIA,cAAAA,WAAU,MAAM,IAAI;AAC1B,mBAAWA,QAAO;AAAA,eACX,OAAO;AACN,gBAAA,MAAM,2BAA2B,KAAK;AAAA,MAAA;AAAA,IAChD;AAGW,iBAAA;AAEb,WAAO,MAAM;AACX,UAAI,mBAAmB;AAAA,IACzB;AAAA,EAEF,GAAG,EAAE;AAEL,QAAM,sBAAsB;AAAA,IAC1B,CAAC,EAAE,SAAS,iBAA4C;AACtD,iBAAW,CAAC,gBAAgB;AAC1B,YAAI,CAAC,aAAa;AACT,iBAAA;AAAA,QAAA;AAEF,eAAA;AAAA,UACL,GAAG;AAAA,UACH,QAAQ;AAAA,YACN,GAAG,YAAY;AAAA,YACf,qBAAqB,WAAW;AAAA,YAChC,OAAO,cAAc,YAAY,OAAO;AAAA,UAAA;AAAA,QAE5C;AAAA,MAAA,CACD;AAAA,IACH;AAAA,IACA,CAAA;AAAA,EACF;AAEM,QAAA,aAAa,QAAQ,MAAM;AACxB,WAAA;AAAA,MACL,UACI,eAAe,IACf,eAAe;AAAA,QACb,SAAS,QAAQ,IAAI;AAAA,QACrB,YAAY,QAAQ,IAAI;AAAA,QACxB,YAAY;AAAA,MACb,CAAA;AAAA,IACP;AAAA,EAAA,GACC,CAAC,OAAO,CAAC;AAEN,QAAA,QAAQ,QAAQ,MAAM;AACnB,WAAA;AAAA,MACL;AAAA,MACA;AAAA,MACA;AAAA,IACF;AAAA,EACC,GAAA,CAAC,qBAAqB,sBAAsB,OAAO,CAAC;AAGrD,SAAA,oBAAC,eAAe,UAAf,EAAwB,OACvB,UAAC,oBAAA,4BAAA,EAA2B,YAC1B,UAAA,oBAAC,oBAAoB,EAAA,GAAG,iBACtB,UAAA;AAAA,IAAC;AAAA,IAAA;AAAA,MACC,OAAO;AAAA,QACL,cAAY,wCAAS,OAAO,mBAAhB,mBAAgC,QAAO;AAAA,QACnD,iBAAe,wCAAS,OAAO,mBAAhB,mBAAgC,WAAU;AAAA,QACzD,eAAa,wCAAS,OAAO,mBAAhB,mBAAgC,SAAQ;AAAA,QACrD,gBAAc,wCAAS,OAAO,mBAAhB,mBAAgC,UAAS;AAAA,MACzD;AAAA,MAEC;AAAA,IAAA;AAAA,EAAA,EAEL,CAAA,EACF,CAAA,GACF;AAEJ;"}