{
  "version": 3,
  "sources": ["../../@coinbase/onchainkit/src/core/createWagmiConfig.ts", "../../@coinbase/onchainkit/src/internal/hooks/useProviderDependencies.tsx", "../../@coinbase/onchainkit/src/DefaultOnchainKitProviders.tsx", "../../@coinbase/onchainkit/src/OnchainKitProviderBoundary.tsx", "../../@coinbase/onchainkit/src/internal/utils/checkHashLength.ts", "../../@coinbase/onchainkit/src/utils/crypto.ts", "../../@coinbase/onchainkit/src/OnchainKitProvider.tsx"],
  "sourcesContent": ["import { http, cookieStorage, createConfig, createStorage } from 'wagmi';\nimport { base, baseSepolia } from 'wagmi/chains';\nimport { coinbaseWallet } from 'wagmi/connectors';\nimport type { CreateWagmiConfigParams } from './types';\n\n/**\n * createWagmiConfig returns a WagmiConfig (https://wagmi.sh/react/api/createConfig) using OnchainKit provided settings.\n * This function should only be used if the user does not provide WagmiProvider as a parent in the React context.\n */\nexport const createWagmiConfig = ({\n  apiKey,\n  appName,\n  appLogoUrl,\n  connectors = [\n    coinbaseWallet({\n      appName,\n      appLogoUrl,\n      preference: 'all',\n    }),\n  ],\n}: CreateWagmiConfigParams) => {\n  return createConfig({\n    chains: [base, baseSepolia],\n    connectors,\n    storage: createStorage({\n      storage: cookieStorage,\n    }),\n    ssr: true,\n    transports: {\n      [base.id]: apiKey\n        ? http(`https://api.developer.coinbase.com/rpc/v1/base/${apiKey}`)\n        : http(),\n      [baseSepolia.id]: apiKey\n        ? http(\n            `https://api.developer.coinbase.com/rpc/v1/base-sepolia/${apiKey}`,\n          )\n        : http(),\n    },\n  });\n};\n", "import { type QueryClient, useQueryClient } from '@tanstack/react-query';\nimport { useMemo } from 'react';\nimport { type Config, WagmiProviderNotFoundError, useConfig } from 'wagmi';\n\n/** useProviderDependencies will return the provided Wagmi configuration and QueryClient if they exist in the React context, otherwise it will return null\n * NotFound errors will fail gracefully\n * Unexpected errors will be logged to the console as an error, and will return null for the problematic dependency\n */\nexport function useProviderDependencies() {\n  /** Check the context for WagmiProvider\n   * Wagmi configuration defaults to the provided config if it exists\n   * Otherwise, use the OnchainKit-provided Wagmi configuration\n   */\n  let providedWagmiConfig: Config | null = null;\n  let providedQueryClient: QueryClient | null = null;\n\n  try {\n    // eslint-disable-next-line react-hooks/rules-of-hooks\n    providedWagmiConfig = useConfig();\n  } catch (error) {\n    if (!(error instanceof WagmiProviderNotFoundError)) {\n      console.error('Error fetching WagmiProvider, using default:', error);\n    }\n  }\n\n  try {\n    // eslint-disable-next-line react-hooks/rules-of-hooks\n    providedQueryClient = useQueryClient();\n  } catch (error) {\n    if (\n      !(\n        (error as Error).message ===\n        'No QueryClient set, use QueryClientProvider to set one'\n      )\n    ) {\n      console.error('Error fetching QueryClient, using default:', error);\n    }\n  }\n\n  return useMemo(() => {\n    return {\n      providedWagmiConfig,\n      providedQueryClient,\n    };\n  }, [providedWagmiConfig, providedQueryClient]);\n}\n", "import { QueryClient, QueryClientProvider } from '@tanstack/react-query';\nimport {\n  type PropsWithChildren,\n  useCallback,\n  useEffect,\n  useMemo,\n  useRef,\n  useState,\n} from 'react';\nimport { Config, WagmiProvider } from 'wagmi';\nimport { coinbaseWallet } from 'wagmi/connectors';\nimport { createWagmiConfig } from './core/createWagmiConfig';\nimport { useProviderDependencies } from './internal/hooks/useProviderDependencies';\nimport { useOnchainKit } from './useOnchainKit';\nimport type { CreateWagmiConfigParams } from './core/types';\n\nexport function DefaultOnchainKitProviders({\n  children,\n  connectors,\n}: PropsWithChildren<{ connectors?: CreateWagmiConfigParams['connectors'] }>) {\n  // Check the React context for WagmiProvider and QueryClientProvider\n  const { providedWagmiConfig, providedQueryClient } =\n    useProviderDependencies();\n\n  return (\n    <WagmiProviderWithDefault\n      providedWagmiConfig={providedWagmiConfig}\n      connectors={connectors}\n    >\n      <QueryClientProviderWithDefault providedQueryClient={providedQueryClient}>\n        {children}\n      </QueryClientProviderWithDefault>\n    </WagmiProviderWithDefault>\n  );\n}\n\nfunction WagmiProviderWithDefault({\n  children,\n  providedWagmiConfig,\n  connectors,\n}: PropsWithChildren<{\n  providedWagmiConfig: Config | null;\n  connectors?: CreateWagmiConfigParams['connectors'];\n}>) {\n  const onchainKitConfig = useOnchainKit();\n  const prevConnectorsRef =\n    useRef<CreateWagmiConfigParams['connectors']>(connectors);\n\n  const getWagmiConfig = useCallback(() => {\n    if (providedWagmiConfig) return providedWagmiConfig;\n\n    const appName = onchainKitConfig.config?.appearance?.name ?? undefined;\n    const appLogoUrl = onchainKitConfig.config?.appearance?.logo ?? undefined;\n\n    return createWagmiConfig({\n      apiKey: onchainKitConfig.apiKey ?? undefined,\n      appName,\n      appLogoUrl,\n      connectors: connectors ?? [\n        coinbaseWallet({\n          appName,\n          appLogoUrl,\n          preference: onchainKitConfig.config?.wallet?.preference,\n        }),\n      ],\n    });\n  }, [\n    onchainKitConfig.apiKey,\n    onchainKitConfig.config,\n    connectors,\n    providedWagmiConfig,\n  ]);\n\n  const [config, setConfig] = useState(() => {\n    return getWagmiConfig();\n  });\n\n  useEffect(() => {\n    if (prevConnectorsRef.current !== connectors) {\n      setConfig(getWagmiConfig());\n      prevConnectorsRef.current = connectors;\n    }\n  }, [connectors, getWagmiConfig]);\n\n  if (providedWagmiConfig) {\n    return children;\n  }\n\n  return <WagmiProvider config={config}>{children}</WagmiProvider>;\n}\n\nfunction QueryClientProviderWithDefault({\n  children,\n  providedQueryClient,\n}: PropsWithChildren<{ providedQueryClient: QueryClient | null }>) {\n  const queryClient = useMemo(() => {\n    return providedQueryClient || new QueryClient();\n  }, [providedQueryClient]);\n\n  if (providedQueryClient) return children;\n\n  return (\n    <QueryClientProvider client={queryClient}>{children}</QueryClientProvider>\n  );\n}\n", "import {\n  Component,\n  type ComponentType,\n  type ErrorInfo,\n  type ReactNode,\n} from 'react';\nimport { sendAnalyticsPayload } from './core/analytics/hooks/useAnalytics';\nimport { ErrorEvent } from './core/analytics/types';\ntype Props = {\n  fallback?: ComponentType<{ error: Error }>;\n  children: ReactNode;\n};\n\ntype State = {\n  error: Error | null;\n};\n\nclass OnchainKitProviderBoundary extends Component<Props, State> {\n  state: State = {\n    error: null,\n  };\n\n  static getDerivedStateFromError(error: Error): State {\n    return { error };\n  }\n\n  componentDidCatch(error: Error, errorInfo: ErrorInfo) {\n    console.error('Uncaught error:', error, errorInfo);\n\n    sendAnalyticsPayload(ErrorEvent.ComponentError, {\n      component: 'OnchainKitProviderBoundary',\n      error: error.message,\n      metadata: {\n        message: error.message,\n        stack: errorInfo.componentStack,\n      },\n    });\n  }\n\n  render() {\n    if (this.state.error) {\n      if (this.props.fallback) {\n        const Fallback = this.props.fallback;\n        return <Fallback error={this.state.error} />;\n      }\n      return <h1>Sorry, we had an unhandled error</h1>;\n    }\n\n    return this.props.children;\n  }\n}\n\nexport default OnchainKitProviderBoundary;\n", "/**\n * Checks if a given hash has a given length.\n * The hash must start with '0x' followed by hexadecimal characters (a-f, A-F, 0-9).\n */\nexport function checkHashLength(\n  hash: string, // hash to be checked\n  length: number, // length of hash\n): hash is `0x${string}` {\n  return new RegExp(`^0x[a-fA-F0-9]{${length}}$`).test(hash);\n}\n", "// Secure fallback using crypto.getRandomValues\nconst getRandomValues = (size: number) => {\n  const array = new Uint8Array(size);\n  crypto.getRandomValues(array);\n  return array;\n};\n\n/**\n * Generates a UUID using the crypto API if available, otherwise falls back to a\n * more insecure method. Only use this for non-critical purposes.\n *\n * @returns A UUID string that may not be cryptographically secure\n */\nexport const generateUUIDWithInsecureFallback = () => {\n  if (\n    typeof crypto !== 'undefined' &&\n    typeof crypto.randomUUID === 'function'\n  ) {\n    return crypto.randomUUID();\n  }\n\n  const bytes = getRandomValues(16);\n  // Format the random bytes into a UUID string\n  return (\n    bytes[0].toString(16).padStart(2, '0') +\n    bytes[1].toString(16).padStart(2, '0') +\n    bytes[2].toString(16).padStart(2, '0') +\n    bytes[3].toString(16).padStart(2, '0') +\n    '-' +\n    bytes[4].toString(16).padStart(2, '0') +\n    bytes[5].toString(16).padStart(2, '0') +\n    '-' +\n    ((bytes[6] & 0x0f) | 0x40).toString(16).padStart(2, '0') + // UUID version 4\n    bytes[7].toString(16).padStart(2, '0') +\n    '-' +\n    ((bytes[8] & 0x3f) | 0x80).toString(16).padStart(2, '0') + // UUID variant\n    bytes[9].toString(16).padStart(2, '0') +\n    '-' +\n    bytes[10].toString(16).padStart(2, '0') +\n    bytes[11].toString(16).padStart(2, '0') +\n    bytes[12].toString(16).padStart(2, '0') +\n    bytes[13].toString(16).padStart(2, '0') +\n    bytes[14].toString(16).padStart(2, '0') +\n    bytes[15].toString(16).padStart(2, '0')\n  );\n};\n", "'use client';\nimport { setOnchainKitConfig } from '@/core/OnchainKitConfig';\nimport { useMemo } from 'react';\nimport { DefaultOnchainKitProviders } from './DefaultOnchainKitProviders';\nimport OnchainKitProviderBoundary from './OnchainKitProviderBoundary';\nimport { DEFAULT_PRIVACY_URL, DEFAULT_TERMS_URL } from './core/constants';\nimport { COINBASE_VERIFIED_ACCOUNT_SCHEMA_ID } from './identity/constants';\nimport { checkHashLength } from './internal/utils/checkHashLength';\nimport type { OnchainKitProviderReact } from './types';\nimport { generateUUIDWithInsecureFallback } from './utils/crypto';\nimport { OnchainKitContext } from './useOnchainKit';\n\n/**\n * Provides the OnchainKit React Context to the app.\n */\nexport function OnchainKitProvider({\n  address,\n  analytics,\n  apiKey,\n  chain,\n  children,\n  config,\n  projectId,\n  rpcUrl,\n  schemaId,\n}: OnchainKitProviderReact) {\n  if (schemaId && !checkHashLength(schemaId, 64)) {\n    throw Error('EAS schemaId must be 64 characters prefixed with \"0x\"');\n  }\n\n  const sessionId = useMemo(() => generateUUIDWithInsecureFallback(), []);\n\n  // eslint-disable-next-line complexity\n  const value = useMemo(() => {\n    const defaultPaymasterUrl = apiKey\n      ? `https://api.developer.coinbase.com/rpc/v1/${chain.name\n          .replace(' ', '-')\n          .toLowerCase()}/${apiKey}`\n      : null;\n    const onchainKitConfig = {\n      address: address ?? null,\n      apiKey: apiKey ?? null,\n      chain: chain,\n      config: {\n        analytics: analytics ?? true,\n        analyticsUrl: config?.analyticsUrl ?? null,\n        appearance: {\n          name: config?.appearance?.name ?? 'Dapp',\n          logo: config?.appearance?.logo ?? '',\n          mode: config?.appearance?.mode ?? 'auto',\n          theme: config?.appearance?.theme ?? 'default',\n        },\n        paymaster: config?.paymaster || defaultPaymasterUrl,\n        wallet: {\n          display: config?.wallet?.display ?? 'classic',\n          preference: config?.wallet?.preference ?? 'all',\n          signUpEnabled: config?.wallet?.signUpEnabled ?? true,\n          termsUrl: config?.wallet?.termsUrl || DEFAULT_TERMS_URL,\n          privacyUrl: config?.wallet?.privacyUrl || DEFAULT_PRIVACY_URL,\n          supportedWallets: {\n            rabby: config?.wallet?.supportedWallets?.rabby ?? false,\n            trust: config?.wallet?.supportedWallets?.trust ?? false,\n            frame: config?.wallet?.supportedWallets?.frame ?? false,\n          },\n        },\n      },\n      projectId: projectId ?? null,\n      rpcUrl: rpcUrl ?? null,\n      schemaId: schemaId ?? COINBASE_VERIFIED_ACCOUNT_SCHEMA_ID,\n      sessionId,\n    };\n    setOnchainKitConfig(onchainKitConfig);\n    return onchainKitConfig;\n  }, [\n    address,\n    analytics,\n    apiKey,\n    chain,\n    config,\n    projectId,\n    rpcUrl,\n    schemaId,\n    sessionId,\n  ]);\n\n  return (\n    <OnchainKitContext.Provider value={value}>\n      <DefaultOnchainKitProviders>\n        <OnchainKitProviderBoundary>{children}</OnchainKitProviderBoundary>\n      </DefaultOnchainKitProviders>\n    </OnchainKitContext.Provider>\n  );\n}\n"],
  "mappings": "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",
  "names": []
}
