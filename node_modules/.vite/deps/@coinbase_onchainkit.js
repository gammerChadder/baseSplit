import "./chunk-ALUSTTMD.js";
import {
  DEFAULT_PRIVACY_URL,
  DEFAULT_TERMS_URL,
  ErrorEvent,
  coinbaseWallet,
  sendAnalyticsPayload,
  version
} from "./chunk-UT3QZF2C.js";
import {
  COINBASE_VERIFIED_ACCOUNT_SCHEMA_ID,
  OnchainKitContext,
  getOnchainKitConfig,
  isBase,
  isEthereum,
  setOnchainKitConfig,
  useOnchainKit
} from "./chunk-W2BDYGEU.js";
import {
  base,
  baseSepolia
} from "./chunk-W4O76CHD.js";
import {
  WagmiProvider,
  WagmiProviderNotFoundError,
  cookieStorage,
  createConfig,
  createStorage,
  useConfig
} from "./chunk-FKFV6U3K.js";
import {
  http
} from "./chunk-GBHARR65.js";
import "./chunk-52G5JAH4.js";
import "./chunk-NXERQML5.js";
import "./chunk-MFCROKER.js";
import {
  QueryClient,
  QueryClientProvider,
  useQueryClient
} from "./chunk-N52X2Y7B.js";
import "./chunk-GIHFJT4Y.js";
import "./chunk-3LYIN2JF.js";
import "./chunk-AVNE4FUI.js";
import "./chunk-ZLUBC7IW.js";
import "./chunk-R3RTZXAG.js";
import "./chunk-RRV55GGF.js";
import {
  require_jsx_runtime
} from "./chunk-5Y4SKFOD.js";
import {
  require_react
} from "./chunk-TCRMNDQ6.js";
import {
  __toESM
} from "./chunk-4CFW2BUT.js";

// node_modules/@coinbase/onchainkit/dist/OnchainKitProvider.js
var import_jsx_runtime3 = __toESM(require_jsx_runtime(), 1);
var import_react4 = __toESM(require_react(), 1);

// node_modules/@coinbase/onchainkit/dist/DefaultOnchainKitProviders.js
var import_jsx_runtime = __toESM(require_jsx_runtime(), 1);
var import_react2 = __toESM(require_react(), 1);

// node_modules/@coinbase/onchainkit/dist/core/createWagmiConfig.js
var createWagmiConfig = ({
  apiKey,
  appName,
  appLogoUrl,
  connectors = [
    coinbaseWallet({
      appName,
      appLogoUrl,
      preference: "all"
    })
  ]
}) => {
  return createConfig({
    chains: [base, baseSepolia],
    connectors,
    storage: createStorage({
      storage: cookieStorage
    }),
    ssr: true,
    transports: {
      [base.id]: apiKey ? http(`https://api.developer.coinbase.com/rpc/v1/base/${apiKey}`) : http(),
      [baseSepolia.id]: apiKey ? http(
        `https://api.developer.coinbase.com/rpc/v1/base-sepolia/${apiKey}`
      ) : http()
    }
  });
};

// node_modules/@coinbase/onchainkit/dist/internal/hooks/useProviderDependencies.js
var import_react = __toESM(require_react(), 1);
function useProviderDependencies() {
  let providedWagmiConfig = null;
  let providedQueryClient = null;
  try {
    providedWagmiConfig = useConfig();
  } catch (error) {
    if (!(error instanceof WagmiProviderNotFoundError)) {
      console.error("Error fetching WagmiProvider, using default:", error);
    }
  }
  try {
    providedQueryClient = useQueryClient();
  } catch (error) {
    if (!(error.message === "No QueryClient set, use QueryClientProvider to set one")) {
      console.error("Error fetching QueryClient, using default:", error);
    }
  }
  return (0, import_react.useMemo)(() => {
    return {
      providedWagmiConfig,
      providedQueryClient
    };
  }, [providedWagmiConfig, providedQueryClient]);
}

// node_modules/@coinbase/onchainkit/dist/DefaultOnchainKitProviders.js
function DefaultOnchainKitProviders({
  children,
  connectors
}) {
  const { providedWagmiConfig, providedQueryClient } = useProviderDependencies();
  return (0, import_jsx_runtime.jsx)(
    WagmiProviderWithDefault,
    {
      providedWagmiConfig,
      connectors,
      children: (0, import_jsx_runtime.jsx)(QueryClientProviderWithDefault, { providedQueryClient, children })
    }
  );
}
function WagmiProviderWithDefault({
  children,
  providedWagmiConfig,
  connectors
}) {
  const onchainKitConfig = useOnchainKit();
  const prevConnectorsRef = (0, import_react2.useRef)(connectors);
  const getWagmiConfig = (0, import_react2.useCallback)(() => {
    var _a, _b, _c, _d, _e, _f;
    if (providedWagmiConfig) return providedWagmiConfig;
    const appName = ((_b = (_a = onchainKitConfig.config) == null ? void 0 : _a.appearance) == null ? void 0 : _b.name) ?? void 0;
    const appLogoUrl = ((_d = (_c = onchainKitConfig.config) == null ? void 0 : _c.appearance) == null ? void 0 : _d.logo) ?? void 0;
    return createWagmiConfig({
      apiKey: onchainKitConfig.apiKey ?? void 0,
      appName,
      appLogoUrl,
      connectors: connectors ?? [
        coinbaseWallet({
          appName,
          appLogoUrl,
          preference: (_f = (_e = onchainKitConfig.config) == null ? void 0 : _e.wallet) == null ? void 0 : _f.preference
        })
      ]
    });
  }, [
    onchainKitConfig.apiKey,
    onchainKitConfig.config,
    connectors,
    providedWagmiConfig
  ]);
  const [config, setConfig] = (0, import_react2.useState)(() => {
    return getWagmiConfig();
  });
  (0, import_react2.useEffect)(() => {
    if (prevConnectorsRef.current !== connectors) {
      setConfig(getWagmiConfig());
      prevConnectorsRef.current = connectors;
    }
  }, [connectors, getWagmiConfig]);
  if (providedWagmiConfig) {
    return children;
  }
  return (0, import_jsx_runtime.jsx)(WagmiProvider, { config, children });
}
function QueryClientProviderWithDefault({
  children,
  providedQueryClient
}) {
  const queryClient = (0, import_react2.useMemo)(() => {
    return providedQueryClient || new QueryClient();
  }, [providedQueryClient]);
  if (providedQueryClient) return children;
  return (0, import_jsx_runtime.jsx)(QueryClientProvider, { client: queryClient, children });
}

// node_modules/@coinbase/onchainkit/dist/OnchainKitProviderBoundary.js
var import_jsx_runtime2 = __toESM(require_jsx_runtime(), 1);
var import_react3 = __toESM(require_react(), 1);
var OnchainKitProviderBoundary = class extends import_react3.Component {
  constructor() {
    super(...arguments);
    this.state = {
      error: null
    };
  }
  static getDerivedStateFromError(error) {
    return { error };
  }
  componentDidCatch(error, errorInfo) {
    console.error("Uncaught error:", error, errorInfo);
    sendAnalyticsPayload(ErrorEvent.ComponentError, {
      component: "OnchainKitProviderBoundary",
      error: error.message,
      metadata: {
        message: error.message,
        stack: errorInfo.componentStack
      }
    });
  }
  render() {
    if (this.state.error) {
      if (this.props.fallback) {
        const Fallback = this.props.fallback;
        return (0, import_jsx_runtime2.jsx)(Fallback, { error: this.state.error });
      }
      return (0, import_jsx_runtime2.jsx)("h1", { children: "Sorry, we had an unhandled error" });
    }
    return this.props.children;
  }
};

// node_modules/@coinbase/onchainkit/dist/internal/utils/checkHashLength.js
function checkHashLength(hash, length) {
  return new RegExp(`^0x[a-fA-F0-9]{${length}}$`).test(hash);
}

// node_modules/@coinbase/onchainkit/dist/utils/crypto.js
var getRandomValues = (size) => {
  const array = new Uint8Array(size);
  crypto.getRandomValues(array);
  return array;
};
var generateUUIDWithInsecureFallback = () => {
  if (typeof crypto !== "undefined" && typeof crypto.randomUUID === "function") {
    return crypto.randomUUID();
  }
  const bytes = getRandomValues(16);
  return bytes[0].toString(16).padStart(2, "0") + bytes[1].toString(16).padStart(2, "0") + bytes[2].toString(16).padStart(2, "0") + bytes[3].toString(16).padStart(2, "0") + "-" + bytes[4].toString(16).padStart(2, "0") + bytes[5].toString(16).padStart(2, "0") + "-" + (bytes[6] & 15 | 64).toString(16).padStart(2, "0") + // UUID version 4
  bytes[7].toString(16).padStart(2, "0") + "-" + (bytes[8] & 63 | 128).toString(16).padStart(2, "0") + // UUID variant
  bytes[9].toString(16).padStart(2, "0") + "-" + bytes[10].toString(16).padStart(2, "0") + bytes[11].toString(16).padStart(2, "0") + bytes[12].toString(16).padStart(2, "0") + bytes[13].toString(16).padStart(2, "0") + bytes[14].toString(16).padStart(2, "0") + bytes[15].toString(16).padStart(2, "0");
};

// node_modules/@coinbase/onchainkit/dist/OnchainKitProvider.js
function OnchainKitProvider({
  address,
  analytics,
  apiKey,
  chain,
  children,
  config,
  projectId,
  rpcUrl,
  schemaId
}) {
  if (schemaId && !checkHashLength(schemaId, 64)) {
    throw Error('EAS schemaId must be 64 characters prefixed with "0x"');
  }
  const sessionId = (0, import_react4.useMemo)(() => generateUUIDWithInsecureFallback(), []);
  const value = (0, import_react4.useMemo)(() => {
    var _a, _b, _c, _d, _e, _f, _g, _h, _i, _j, _k, _l, _m, _n, _o;
    const defaultPaymasterUrl = apiKey ? `https://api.developer.coinbase.com/rpc/v1/${chain.name.replace(" ", "-").toLowerCase()}/${apiKey}` : null;
    const onchainKitConfig = {
      address: address ?? null,
      apiKey: apiKey ?? null,
      chain,
      config: {
        analytics: analytics ?? true,
        analyticsUrl: (config == null ? void 0 : config.analyticsUrl) ?? null,
        appearance: {
          name: ((_a = config == null ? void 0 : config.appearance) == null ? void 0 : _a.name) ?? "Dapp",
          logo: ((_b = config == null ? void 0 : config.appearance) == null ? void 0 : _b.logo) ?? "",
          mode: ((_c = config == null ? void 0 : config.appearance) == null ? void 0 : _c.mode) ?? "auto",
          theme: ((_d = config == null ? void 0 : config.appearance) == null ? void 0 : _d.theme) ?? "default"
        },
        paymaster: (config == null ? void 0 : config.paymaster) || defaultPaymasterUrl,
        wallet: {
          display: ((_e = config == null ? void 0 : config.wallet) == null ? void 0 : _e.display) ?? "classic",
          preference: ((_f = config == null ? void 0 : config.wallet) == null ? void 0 : _f.preference) ?? "all",
          signUpEnabled: ((_g = config == null ? void 0 : config.wallet) == null ? void 0 : _g.signUpEnabled) ?? true,
          termsUrl: ((_h = config == null ? void 0 : config.wallet) == null ? void 0 : _h.termsUrl) || DEFAULT_TERMS_URL,
          privacyUrl: ((_i = config == null ? void 0 : config.wallet) == null ? void 0 : _i.privacyUrl) || DEFAULT_PRIVACY_URL,
          supportedWallets: {
            rabby: ((_k = (_j = config == null ? void 0 : config.wallet) == null ? void 0 : _j.supportedWallets) == null ? void 0 : _k.rabby) ?? false,
            trust: ((_m = (_l = config == null ? void 0 : config.wallet) == null ? void 0 : _l.supportedWallets) == null ? void 0 : _m.trust) ?? false,
            frame: ((_o = (_n = config == null ? void 0 : config.wallet) == null ? void 0 : _n.supportedWallets) == null ? void 0 : _o.frame) ?? false
          }
        }
      },
      projectId: projectId ?? null,
      rpcUrl: rpcUrl ?? null,
      schemaId: schemaId ?? COINBASE_VERIFIED_ACCOUNT_SCHEMA_ID,
      sessionId
    };
    setOnchainKitConfig(onchainKitConfig);
    return onchainKitConfig;
  }, [
    address,
    analytics,
    apiKey,
    chain,
    config,
    projectId,
    rpcUrl,
    schemaId,
    sessionId
  ]);
  return (0, import_jsx_runtime3.jsx)(OnchainKitContext.Provider, { value, children: (0, import_jsx_runtime3.jsx)(DefaultOnchainKitProviders, { children: (0, import_jsx_runtime3.jsx)(OnchainKitProviderBoundary, { children }) }) });
}
export {
  OnchainKitProvider,
  getOnchainKitConfig,
  isBase,
  isEthereum,
  setOnchainKitConfig,
  useOnchainKit,
  version
};
//# sourceMappingURL=@coinbase_onchainkit.js.map
